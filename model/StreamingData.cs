// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var streamingData = StreamingData.FromJson(jsonString);
using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

namespace MyStreamingServer.Models
{
    

    public partial class StreamingData
    {
        [JsonProperty("StreamingData")]
        public StreamingDatum[] StreamingDataStreamingData { get; set; }
    }

    public partial class StreamingDatum
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("streaming_type")]
        public string StreamingType { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("OI")]
        public object Oi { get; set; }

        [JsonProperty("OIChngPer")]
        public object OiChngPer { get; set; }

        [JsonProperty("ttv")]
        public long Ttv { get; set; }

        [JsonProperty("atp")]
        public long Atp { get; set; }

        [JsonProperty("chng")]
        public double Chng { get; set; }

        [JsonProperty("chngPer")]
        public double ChngPer { get; set; }

        [JsonProperty("close")]
        public double Close { get; set; }

        [JsonProperty("high")]
        public double High { get; set; }

        [JsonProperty("lcl")]
        public long Lcl { get; set; }

        [JsonProperty("low")]
        public double Low { get; set; }

        [JsonProperty("ltp")]
        public double Ltp { get; set; }

        [JsonProperty("ltq")]
        public long Ltq { get; set; }

        [JsonProperty("ltt")]
        public string Ltt { get; set; }

        [JsonProperty("open")]
        public double Open { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("ucl")]
        public long Ucl { get; set; }

        [JsonProperty("vol")]
        public long Vol { get; set; }

        [JsonProperty("yHigh")]
        public long YHigh { get; set; }

        [JsonProperty("yLow")]
        public long YLow { get; set; }

        [JsonProperty("askPrice")]
        public object AskPrice { get; set; }

        [JsonProperty("bidPrice")]
        public object BidPrice { get; set; }
    }

    public partial class StreamingData
    {
        public static StreamingData FromJson(string json) => JsonConvert.DeserializeObject<StreamingData>(json);
    }

    public static class Serialize
    {
        public static string ToJson(this StreamingData self) => JsonConvert.SerializeObject(self);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
